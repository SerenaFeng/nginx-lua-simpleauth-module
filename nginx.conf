
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    lua_package_path '/usr/local/openresty/lualib/simpleauth/?.lua;;';
    init_by_lua '-- init authz
                 simpleauthz = require "simpleauthz"
                 simpleauthz.create_rules("./rule.yaml")

                 -- init authn
                 simpleauthn = require "simpleauthn_cookie"
                 simpleauthn.set_secret_key("your-secret")
                 simpleauthn.set_max_age(3600)
                 simpleauthn.set_auth_url_fmt("http://10.62.105.17:8711/auth/?%s")
                ';


    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;
    ldap_server ldapserver {
      url ldap://10.62.105.17:1389/dc=example,dc=org?uid?sub;
      binddn "cn=admin,dc=example,dc=org";
      binddn_passwd admin;
      group_attribute cn;
      group_attribute_is_dn on;
      require valid_user;
    }

    server {
        listen       8711;
        server_name  10.62.105.17;
        location /auth/ {
            # This is the real authn module, which use LDAP as authn backend.
            auth_ldap "LDAP Login";
            auth_ldap_servers ldapserver;

            # If the previous LDAP auth is success, the user name will be stored in ngx.var.remote_user
            # simpleauthn.set_cookie() will generate auth info and send to user browser
            default_type 'text/html';
            content_by_lua 'simpleauthn.set_cookie(ngx.var.remote_user, "10.62.105.17")';
        }
    }

    server {
        listen       9711;
        server_name  10.62.105.17;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            root   html;
            index  index.html index.htm;
            ## Note the params, the second param is a function, while the third is result of a function call.
            ## The authz module will first invoke simpleauthn.get_uid() to get the current uid, if uid is nil which
            ## means user is not logged in, he will be redirected to auth_url.
            ## for rule1: all members in group1 will be allowed except lucy.

            access_by_lua 'simpleauthz.access_with_authn("rule1", simpleauthn.get_uid, simpleauthn.get_auth_url())';
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
